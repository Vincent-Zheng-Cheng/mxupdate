##############################################################################
#
# Copyright 2008 The MxUpdate Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Revision:        $Rev$
# Last Changed:    $Date$
# Last Changed By: $Author$
#
##############################################################################

tcl;

eval  {

  set VERSION "0-1"

  set ENV_NAME "MXUPDATE_PATH"
  
  # get the installation directory
  # is the installation directory defined as local MX environment variable?
  if {[mql exists env "${ENV_NAME}"] > 0} {
    set sPath [mql get env "${ENV_NAME}"]
  # maybe as global environment variable?
  } elseif {[mql exists env global "${ENV_NAME}"] > 0} {
    set sPath [mql get env global "${ENV_NAME}"]
  # or as shell enviroment variable?
  } elseif {[info exists env(${ENV_NAME})] > 0}  {
    set sPath $env(${ENV_NAME})
  # otherwise error!!!!
  } else  {
    error "\nRequired enviroment variable '${ENV_NAME}' is not defined!"
  }

  ##############################################################################
  # The procedure installs given JPO within the given root path.
  ##############################################################################
  proc pInstallJPO {_sRoot _sJPOName _sVersion}  {
    regsub -all {\.} "${_sJPOName}" {/} sFileName
    set sFileName [file join "${_sRoot}" "${sFileName}_mxJPO.java"]
    set sFileDate [clock format [file mtime "${sFileName}"]  -gmt true -format "%Y-%m-%d %H:%M:%S"]
    if {[mql list prog "${_sJPOName}"] == ""}  {
      set sJPODate ""
    } else  {
      set sJPODate [mql print prog "${_sJPOName}" select property\[file date\].value dump]
    }
    if {"${sJPODate}" != "${sFileDate}"}  {
      puts "update jpo '${_sJPOName}'"
      mql insert prog "${sFileName}"
      mql mod prog ${_sJPOName} \
            add property "file date" value "${sFileDate}" \
            add property "version" value "${_sVersion}"
    }
  }

  ##############################################################################
  # The procedure installs depending data model needed for the MxUpdate.
  ##############################################################################
  proc pInstallDM {_sVersion}  {
    set lsAttributes [list "emxGerLibUpdateAuthor" \
                           "emxGerLibUpdateInstalledDate" \
                           "emxGerLibUpdateVersion"]
    set lsTypes [list "eService Number Generator" \
                      "eService Object Generator" \
                      "eService Trigger Program Parameters"]
    # create attributes
    set lsExists [split [mql list attribute [join ${lsAttributes} ","]] "\n"]
    foreach sOneAttribute ${lsAttributes}  {
      if {[lsearch ${lsExists} "${sOneAttribute}"] < 0}  {
        puts "create attribute '${sOneAttribute}'"
        mql add attribute "${sOneAttribute}" type string
      } else  {
        puts "update attribute '${sOneAttribute}'"
      }
      mql modify attribute "${sOneAttribute}" \
          add property "application"    value "MxUpdate" \
          add property "author"         value "The MxUpdate Team" \
          add property "installed date" value [clock format [clock clicks]  -gmt true -format "%m-%d-%Y"] \
          add property "installer"      value "The MxUpdate Team" \
          add property "original name"  value "${sOneAttribute}" \
          add property "version"        value "${_sVersion}"
          
    }
    # update types
    foreach sOneType ${lsTypes}  {
      foreach sOneAttribute ${lsAttributes}  {
        if {[mql print type "${sOneType}" select attribute\[${sOneAttribute}\] dump]=="FALSE"}  {
          puts "add attribute '${sOneAttribute}' to type '${sOneType}'"
          mql modify type "${sOneType}" add attribute "${sOneAttribute}"
        }
      }
    }
    # register MxUpdate
    if {[mql list program "eServiceSystemInformation.tcl"] != ""}  {
      puts "register MxUpdate ${_sVersion}"
      mql mod prog "eServiceSystemInformation.tcl" add property "appVersionMxUpdate" value "${_sVersion}"
    }
  }
  

  mql verbose off

  pInstallDM "${VERSION}"
  pInstallJPO "${sPath}" "net.sourceforge.mxupdate.install.Insert" "${VERSION}"
  pInstallJPO "${sPath}" "net.sourceforge.mxupdate.util.MqlUtil"   "${VERSION}"

  mql exec prog "net.sourceforge.mxupdate.install.Insert" "${sPath}" "${VERSION}"

  mql verbose on
  mql compile prog net.sourceforge.mxupdate.*,MxUpdate
  mql verbose off
}