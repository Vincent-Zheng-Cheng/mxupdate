##############################################################################
#
# Copyright 2008 The MxUpdate Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Revision:        $Rev$
# Last Changed:    $Date$
# Last Changed By: $Author$
#
##############################################################################

tcl;

eval  {

  set VERSION "0-1"

  set ENV_NAME "MXUPDATE_PATH"
  
  # get the installation directory
  # is the installation directory defined as local MX environment variable?
  if {[mql exists env "${ENV_NAME}"] > 0} {
    set sPath [mql get env "${ENV_NAME}"]
  # maybe as global environment variable?
  } elseif {[mql exists env global "${ENV_NAME}"] > 0} {
    set sPath [mql get env global "${ENV_NAME}"]
  # or as shell enviroment variable?
  } elseif {[info exists env(${ENV_NAME})] > 0}  {
    set sPath $env(${ENV_NAME})
  # otherwise error!!!!
  } else  {
    error "\nRequired enviroment variable '${ENV_NAME}' is not defined!"
  }

  ##############################################################################
  # Read the mapping configuration between MX names and internal used names
  ##############################################################################
  proc pReadMapping {_sRoot}  {
    global asMapping

    # read file
    set pFile [open [file join "${_sRoot}" "net" "sourceforge" "mxupdate" "mapping.properties"] r]
    set lsMapping [split [read $pFile] "\n"]
    close $pFile

    # prepare mapping
    foreach sOneLine ${lsMapping}  {
      set sOneLine [string trim "${sOneLine}"]
      # check for none empty line and none comment line 
      if {([string length "${sOneLine}"] > 0) && ([string index "${sOneLine}" 0] != "#")}  {
        # equal index position
        set iIdx [string first "=" "${sOneLine}"]
        if {${iIdx} > 0}  {
          # extract key and value
          set sKey [string trim [string range "${sOneLine}" 0 [expr ${iIdx} - 1]]]
          set sVal [string trim [string range "${sOneLine}" [expr ${iIdx} + 1] end]]
          set asMapping(${sKey}) "${sVal}"
        }
      }
    }
  }

  ##############################################################################
  # The procedure installs given JPO within the given root path.
  ##############################################################################
  proc pInstallJPO {_sRoot _sJPOName _sVersion}  {
    global asMapping

    regsub -all {\.} "${_sJPOName}" {/} sFileName
    set sFileName [file join "${_sRoot}" "${sFileName}_mxJPO.java"]
    set sFileDate [clock format [file mtime "${sFileName}"]  -gmt true -format "%Y-%m-%d %H:%M:%S"]
    if {[mql list prog "${_sJPOName}"] == ""}  {
      set sJPODate ""
    } else  {
      set sJPODate [mql print prog "${_sJPOName}" select property\[$asMapping(Property.FileDate)\].value dump]
    }
    if {"${sJPODate}" != "${sFileDate}"}  {
      puts "update jpo '${_sJPOName}'"
      mql insert prog "${sFileName}"
      mql mod prog ${_sJPOName} \
            add property $asMapping(Property.FileDate) value "${sFileDate}" \
            add property $asMapping(Property.Version) value "${_sVersion}"
    }
  }

  ##############################################################################
  # The procedure installs given property within the given root path.
  ##############################################################################
  proc pInstallProperties {_sRoot _sPropName _sVersion}  {
    global asMapping

    # extract path and file of property
    regsub {\.properties} "${_sPropName}" {} sFileName
    regsub -all {\.} "${sFileName}" {/} sFileName
    set sFileName [file join "${_sRoot}" "${sFileName}.properties"]

    set sFileDate [clock format [file mtime "${sFileName}"]  -gmt true -format "%Y-%m-%d %H:%M:%S"]
    if {[mql list prog "${_sPropName}"] == ""}  {
      set sDate ""
      mql add prog "${_sPropName}"
    } else  {
      set sDate [mql print prog "${_sPropName}" select property\[$asMapping(Property.FileDate)\].value dump]
    }
    if {"${sDate}" != "${sFileDate}"}  {
      puts "update property '${_sPropName}'"
      mql mod prog ${_sPropName} \
            file "${sFileName}" \
            add property $asMapping(Property.FileDate) value "${sFileDate}" \
            add property $asMapping(Property.Version) value "${_sVersion}"
    }
  }

  ##############################################################################
  # The procedure installs depending data model needed for the MxUpdate.
  ##############################################################################
  proc pInstallDM {_sVersion}  {
    global asMapping

    set lsAttributes [list $asMapping(Attribute.CommonAuthor) \
                           $asMapping(Attribute.CommonFileDate) \
                           $asMapping(Attribute.CommonInstalledDate) \
                           $asMapping(Attribute.CommonVersion)]
    set lsTypes      [list $asMapping(Type.NumberGenerator) \
                           $asMapping(Type.ObjectGenerator) \
                           $asMapping(Type.Trigger)]
    # create attributes
    set lsExists [split [mql list attribute [join ${lsAttributes} ","]] "\n"]
    foreach sOneAttribute ${lsAttributes}  {
      if {[lsearch ${lsExists} "${sOneAttribute}"] < 0}  {
        puts "create attribute '${sOneAttribute}'"
        mql add attribute "${sOneAttribute}" type string
      } else  {
        puts "update attribute '${sOneAttribute}'"
      }
      mql modify attribute "${sOneAttribute}" \
          add property $asMapping(Property.Application)   value "MxUpdate" \
          add property $asMapping(Property.Author)        value "The MxUpdate Team" \
          add property $asMapping(Property.InstalledDate) value [clock format [clock clicks]  -gmt true -format "%m-%d-%Y"] \
          add property $asMapping(Property.Installer)     value "The MxUpdate Team" \
          add property $asMapping(Property.OriginalName)  value "${sOneAttribute}" \
          add property $asMapping(Property.Version)       value "${_sVersion}"
    }
    # update types
    foreach sOneType ${lsTypes}  {
      foreach sOneAttribute ${lsAttributes}  {
        if {[mql print type "${sOneType}" select attribute\[${sOneAttribute}\] dump]=="FALSE"}  {
          puts "add attribute '${sOneAttribute}' to type '${sOneType}'"
          mql modify type "${sOneType}" add attribute "${sOneAttribute}"
        }
      }
    }
    # register MxUpdate
    if {[mql list program "eServiceSystemInformation.tcl"] != ""}  {
      puts "register MxUpdate ${_sVersion}"
      mql mod prog "eServiceSystemInformation.tcl" add property "appVersionMxUpdate" value "${_sVersion}"
    }
  }
  

  mql verbose off
  mql set escape off

  pReadMapping "${sPath}"

  pInstallProperties "${sPath}" "net.sourceforge.mxupdate.mapping.properties" "${VERSION}"
  pInstallDM                                                                  "${VERSION}"
  pInstallJPO        "${sPath}" "net.sourceforge.mxupdate.install.Insert"     "${VERSION}"
  pInstallJPO        "${sPath}" "net.sourceforge.mxupdate.util.MqlUtil"       "${VERSION}"

  mql exec prog "net.sourceforge.mxupdate.install.Insert" "${sPath}" "${VERSION}"

  mql verbose on
  mql compile prog net.sourceforge.mxupdate.*,MxUpdate
  mql verbose off
}